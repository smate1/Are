document.addEventListener('DOMContentLoaded', () => {
	const loginForm = document.getElementById('loginForm')

	if (!loginForm) {
		console.error('–§–æ—Ä–º–∞ –≤—Ö–æ–¥—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!')
		return
	}

	loginForm.addEventListener('submit', async event => {
		event.preventDefault()

		const identifier = document.getElementById('identifier').value
		const password = document.getElementById('password').value

		const response = await fetch('/login', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify({ identifier, password }),
		})

		const data = await response.json()
		console.log('–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:', data) // –î–æ–¥–∞—î–º–æ –ª–æ–≥ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

		if (response.ok) {
			// ‚úÖ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ localStorage
			localStorage.setItem('user', JSON.stringify(data.user))

			window.location.href = data.redirect // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ profile.html
		} else {
			alert(data.message)
		}
	})

	// –î–æ–¥–∞—î–º–æ –∫–æ–¥ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É —Ä–µ–∂–∏–º—ñ USE_MOCK_DB
	const setupMockUsers = () => {
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∫–ª—é—á–µ–Ω–∏–π —Ä–µ–∂–∏–º –º–æ–∫-–±–∞–∑–∏
		if (global.USE_MOCK_DB) {
			console.log('üìù –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è –º–æ–∫-—Ä–µ–∂–∏–º—É...');

			try {
				// –ó–∞–≥–∞–ª—å–Ω–∞ –º–∞–ø–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –º–æ–∫-–¥–∞–Ω–∏—Ö
				global.mockDatabase = global.mockDatabase || {};

				// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ
				const { testUsers, testMessages, testConversations } = require('./local-test-users');

				// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –∑–º—ñ–Ω–Ω—ñ–π –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ —ñ–Ω—à–∏—Ö –º–æ–¥—É–ª—ñ–≤
				global.mockDatabase.users = testUsers;
				global.mockDatabase.messages = testMessages;
				global.mockDatabase.conversations = testConversations;

				console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${testUsers.length} —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);
				console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${testMessages.length} —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å`);
				console.log(`‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${testConversations.length} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ä–æ–∑–º–æ–≤`);
				console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ: testuser1 / password123');
			} catch (error) {
				console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
			}
		}
	};

	// –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–∫-–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
	setupMockUsers();

	// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
	app.use(async (req, res, next) => {
	  // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∑–∞–ø–∏—Ç–∞—Ö
	  if (req.user && req.user.id) {
	    try {
	      // –û–Ω–æ–≤–∏—Ç–∏ lastActive –ø–æ–ª–µ
	      await User.findByIdAndUpdate(req.user.id, {
	        lastActive: new Date()
	      });
	    } catch (error) {
	      console.error('Error updating user activity status:', error);
	    }
	  }
	  next();
	});
})
