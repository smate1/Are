const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const config = require('./config');

// –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–ø–æ—Ä—Ü—è –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –º–æ–∫-–¥–∞–Ω–∏—Ö
global.USE_MOCK_DB = true;

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π
const User = require('./models/User');
const Message = require('./models/Message');
const Conversation = require('./models/Conversation');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async function createTestUsers() {
  console.log('üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...');

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
    const existingUsers = await User.find({});
    if (existingUsers.length > 0) {
      console.log(`‚úÖ ${existingUsers.length} —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≤–∂–µ —ñ—Å–Ω—É—î`);
      return existingUsers;
    }

    // –•–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    const hashedPassword = await bcrypt.hash('password123', 10);

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const users = [
      {
        username: 'testuser1',
        email: 'testuser1@example.com',
        password: hashedPassword,
        fullName: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á 1',
        bio: '–¢–µ—Å—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ Era',
        avatar: 'images/avatars/twitter-avatar.svg',
        roles: ['USER'],
        isVerified: true,
        currentLocation: {
          type: 'Point',
          coordinates: [30.5234, 50.4501], // –ö–∏—ó–≤
          lastUpdated: new Date(),
          isSharing: true
        },
        shareLocation: true,
        interests: ['–ø–æ–¥–æ—Ä–æ–∂—ñ', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è', '—Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó']
      },
      {
        username: 'testuser2',
        email: 'testuser2@example.com',
        password: hashedPassword,
        fullName: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á 2',
        bio: '–î—Ä—É–≥–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó',
        avatar: 'images/avatars/facebook-avatar.svg',
        roles: ['USER'],
        isVerified: true,
        currentLocation: {
          type: 'Point',
          coordinates: [30.5264, 50.4511], // –¢—Ä–æ—Ö–∏ –ø—ñ–≤–Ω—ñ—á–Ω—ñ—à–µ –ö–∏—î–≤–∞
          lastUpdated: new Date(),
          isSharing: true
        },
        shareLocation: true,
        interests: ['–º—É–∑–∏–∫–∞', '–∫—ñ–Ω–æ', '—Å–ø–æ—Ä—Ç']
      },
      {
        username: 'testuser3',
        email: 'testuser3@example.com',
        password: hashedPassword,
        fullName: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á 3',
        bio: '–¢—Ä–µ—Ç—ñ–π —Ç–µ—Å—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó',
        avatar: 'images/avatars/google-avatar.svg',
        roles: ['USER'],
        isVerified: true,
        currentLocation: {
          type: 'Point',
          coordinates: [30.5280, 50.4532], // –©–µ —Ç—Ä–æ—Ö–∏ –ø—ñ–≤–Ω—ñ—á–Ω—ñ—à–µ
          lastUpdated: new Date(),
          isSharing: true
        },
        shareLocation: true,
        interests: ['–∫–Ω–∏–≥–∏', '–º–∏—Å—Ç–µ—Ü—Ç–≤–æ', '–∫—É–ª—ñ–Ω–∞—Ä—ñ—è']
      },
      {
        username: 'testuser4',
        email: 'testuser4@example.com',
        password: hashedPassword,
        fullName: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á 4',
        bio: '–ß–µ—Ç–≤–µ—Ä—Ç–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –∞–∫–∞—É–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó',
        avatar: 'images/avatars/github-avatar.svg',
        roles: ['USER'],
        isVerified: true,
        currentLocation: {
          type: 'Point',
          coordinates: [30.5214, 50.4523], // –ó–∞—Ö—ñ–¥–Ω—ñ—à–µ
          lastUpdated: new Date(),
          isSharing: true
        },
        shareLocation: true,
        interests: ['–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è', '–Ω–∞—É–∫–∞', '–æ—Å–≤—ñ—Ç–∞']
      },
      {
        username: 'adminuser',
        email: 'admin@example.com',
        password: hashedPassword,
        fullName: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä',
        bio: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–∏',
        avatar: 'images/default-avatar.svg',
        roles: ['USER', 'ADMIN'],
        isVerified: true,
        currentLocation: {
          type: 'Point',
          coordinates: [30.5238, 50.4503], // –¶–µ–Ω—Ç—Ä –ö–∏—î–≤–∞
          lastUpdated: new Date(),
          isSharing: true
        },
        shareLocation: true,
        interests: ['–∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è', '–±–µ–∑–ø–µ–∫–∞', '–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞']
      }
    ];

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    const createdUsers = await User.insertMany(users);
    console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ ${createdUsers.length} —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤`);

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–≤'—è–∑–∫—ñ–≤ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (–¥—Ä—É–∑—ñ, –∑–∞–ø–∏—Ç–∏ –¥—Ä—É–∂–±–∏)
    await setupUserRelationships(createdUsers);

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    await setupTestMessages(createdUsers);

    return createdUsers;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    throw error;
  }
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∑–≤'—è–∑–∫–∏ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏
async function setupUserRelationships(users) {
  try {
    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á 1 –º–∞—î 2 —ñ 3 —É –¥—Ä—É–∑—è—Ö
    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á 1 –Ω–∞–¥—ñ—Å–ª–∞–≤ –∑–∞–ø–∏—Ç –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 4
    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á 5 (–∞–¥–º—ñ–Ω) –Ω–∞–¥—ñ—Å–ª–∞–≤ –∑–∞–ø–∏—Ç –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 1

    const user1 = users[0];
    const user2 = users[1];
    const user3 = users[2];
    const user4 = users[3];
    const admin = users[4];

    // –î–æ–¥–∞—Ç–∏ –¥—Ä—É–∑—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 1
    user1.friends = [user2._id, user3._id];
    user1.friendRequests = {
      sent: [user4._id],
      received: [admin._id]
    };

    // –û–Ω–æ–≤–∏—Ç–∏ –¥—Ä—É–∂–±—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 2
    user2.friends = [user1._id];

    // –û–Ω–æ–≤–∏—Ç–∏ –¥—Ä—É–∂–±—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 3
    user3.friends = [user1._id];

    // –ó–∞–ø–∏—Ç –Ω–∞ –¥—Ä—É–∂–±—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 4
    user4.friendRequests = {
      received: [user1._id]
    };

    // –ó–∞–ø–∏—Ç –Ω–∞ –¥—Ä—É–∂–±—É –¥–ª—è –∞–¥–º—ñ–Ω–∞
    admin.friendRequests = {
      sent: [user1._id]
    };

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–º—ñ–Ω
    await Promise.all([
      user1.save(),
      user2.save(),
      user3.save(),
      user4.save(),
      admin.save()
    ]);

    console.log('‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –≤—ñ–¥–Ω–æ—Å–∏–Ω–∏ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ (–¥—Ä—É–∑—ñ, –∑–∞–ø–∏—Ç–∏)');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ –∑–≤\'—è–∑–∫—ñ–≤ –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏:', error);
    throw error;
  }
}

// –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async function setupTestMessages(users) {
  try {
    const user1 = users[0];
    const user2 = users[1];
    const user3 = users[2];

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ 1 —ñ 2
    const message1 = new Message({
      sender: user1._id,
      recipient: user2._id,
      content: '–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Å–ø—Ä–∞–≤–∏?',
      read: true,
      createdAt: new Date(Date.now() - 3600000) // 1 –≥–æ–¥–∏–Ω–∞ —Ç–æ–º—É
    });
    await message1.save();

    const message2 = new Message({
      sender: user2._id,
      recipient: user1._id,
      content: '–ü—Ä–∏–≤—ñ—Ç! –í—Å–µ –¥–æ–±—Ä–µ, –¥—è–∫—É—é! –Ø–∫ —É —Ç–µ–±–µ?',
      read: true,
      createdAt: new Date(Date.now() - 3500000) // 58 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É
    });
    await message2.save();

    const message3 = new Message({
      sender: user1._id,
      recipient: user2._id,
      content: '–¢–µ–∂ –Ω–µ–ø–æ–≥–∞–Ω–æ. –•–æ—Ç—ñ–≤ –∑–∞–ø–∏—Ç–∞—Ç–∏, —á–∏ –Ω–µ —Ö–æ—á–µ—à –∑—É—Å—Ç—Ä—ñ—Ç–∏—Å—è –∑–∞–≤—Ç—Ä–∞?',
      read: true,
      createdAt: new Date(Date.now() - 3400000) // 56 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É
    });
    await message3.save();

    const message4 = new Message({
      sender: user2._id,
      recipient: user1._id,
      content: '–¢–∞–∫, –∑–≤—ñ—Å–Ω–æ! –û –∫–æ—Ç—Ä—ñ–π –≥–æ–¥–∏–Ω—ñ?',
      read: false, // –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      createdAt: new Date(Date.now() - 3300000) // 55 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É
    });
    await message4.save();

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ 1 —ñ 2
    const conversation1 = new Conversation({
      participants: [user1._id, user2._id],
      lastMessage: message4._id,
      createdAt: new Date(Date.now() - 3600000),
      updatedAt: new Date(Date.now() - 3300000),
      unreadCount: new Map([[user1._id.toString(), 1]]) // 1 –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 1
    });
    await conversation1.save();

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ 1 —ñ 3
    const message5 = new Message({
      sender: user3._id,
      recipient: user1._id,
      content: '–ü—Ä–∏–≤—ñ—Ç! –ë–∞—á–∏–≤ —Ç–≤–æ—é –Ω–æ–≤—É –ª–æ–∫–∞—Ü—ñ—é –Ω–∞ –∫–∞—Ä—Ç—ñ!',
      read: false,
      createdAt: new Date(Date.now() - 1800000) // 30 —Ö–≤–∏–ª–∏–Ω —Ç–æ–º—É
    });
    await message5.save();

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É –º—ñ–∂ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏ 1 —ñ 3
    const conversation2 = new Conversation({
      participants: [user1._id, user3._id],
      lastMessage: message5._id,
      createdAt: new Date(Date.now() - 1800000),
      updatedAt: new Date(Date.now() - 1800000),
      unreadCount: new Map([[user1._id.toString(), 1]]) // 1 –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 1
    });
    await conversation2.save();

    console.log('‚úÖ –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–º–æ–≤–∏');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—ñ —Ç–µ—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
createTestUsers()
  .then(() => {
    console.log('‚úÖ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ñ –æ–±–ª—ñ–∫–æ–≤—ñ –¥–∞–Ω—ñ: testuser1 / password123');
    mongoose.connection.close();
  })
  .catch(error => {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:', error);
    mongoose.connection.close();
  });
